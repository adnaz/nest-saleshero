// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../src/@generated/prisma-nestjs-graphql"
    fields_Validator_from = "class-validator"
    fields_Validator_input = true
}
model App {
  id    Int     @default(autoincrement()) @id
  name  String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
   /// @Validator.MinLength(3)
  username  String? @unique
  name  String?
  /// @HideField()
  password String
    ///@HideField({ input: true, output: false })
  apps App[]
    ///@HideField({ input: true, output: false })
  posts Post[]
    ///@HideField({ input: true, output: false })
  courses Course[]
    ///@HideField({ input: true, output: false })
  sections Section[]
  role      Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Course {
  id        Int      @default(autoincrement()) @id
  title     String
  description   String?
  audio File? @relation("audio",fields: [audioId],references: [id])
  audioId Int?
  image File? @relation("image",fields: [imageId],references: [id])
  imageId Int?
  sections Section[]
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  ///@HideField({ input: true, output: false })
  createdAt DateTime @default(now())
  ///@HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt
}
model Section {
  id        Int      @default(autoincrement()) @id
  title     String
  description   String?
  image File? @relation(fields: [imageId],references: [id])
  imageId Int?
  type TypeSection?
  course Course? @relation(fields: [courseId],references:[id])
  courseId Int?
  replies Reply[]
  published Boolean? @default(false)
  ///@HideField({ input: true, output: false })
  author    User?    @relation(fields: [authorId], references: [id])
  ///@HideField({ input: true, output: false })
  authorId  Int?
  ///@HideField({ input: true, output: false })
  createdAt DateTime @default(now())
  ///@HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt
}
model Reply {
  id        Int      @default(autoincrement()) @id
  file File? @relation(fields: [fileId],references: [id])
  fileId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  section Section @relation(fields: [sectionId],references:[id])
  sectionId Int
  user    Actor?    @relation(fields: [actorId], references: [id])
  actorId  Int?
  quickReplies QuickReply? @relation(fields: [quickRepliesId],references:[id])
  quickRepliesId Int?
}
model QuickReply {
    id        Int      @default(autoincrement()) @id
    ///@HideField({ input: true, output: false })
    reply Reply?
    keepIt Boolean @default(true)
    type TypeReply
    ///@HideField({ input: true, output: false })
    values QuickReplyValue[]
}
model QuickReplyValue {
      id        Int      @default(autoincrement()) @id
      title String
      value String
       ///@HideField({ input: true, output: false })
      quickReply QuickReply? @relation(fields: [quickReplyId], references: [id])
      ///@HideField({ input: true, output: false })
      quickReplyId Int?
}

model Actor {
  id    Int     @default(autoincrement()) @id
  name  String?
  avatar   File? @relation(fields: [fileId],references: [id])
  fileId Int?
  replies Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model File {
    id    Int     @default(autoincrement()) @id
    link String? 
    location String?
    key String?
    bucket String?
    etag String?
    reply Reply?
    actor Actor?
    courseImage Course? @relation("image")
    courseAudio Course? @relation("audio")
    section Section?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type TypeFile
}
enum TypeSection {
  CHAT
  ARTICLE
}
enum TypeReply {
  checkbox
  radio
}
enum Role {
  USER
  ADMIN
}
enum TypeFile {
  AUDIO
  IMAGE
  VIDEO
}
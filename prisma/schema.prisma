// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model App {

  id        Int      @id @default(autoincrement())
  name      String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {

  id       Int       @id @default(autoincrement())
  email    String    @unique
  /// @Validator.MinLength(3)
  username String?   @unique
  name     String?
  /// @HideField()
  password String
  apps     App[]
  posts    Post[]
  courses  Course[]
  sections Section[]
  role     Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {

  id        Int      @id @default(autoincrement())
  order     Float?
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affirmation {

  id          Int      @id @default(autoincrement())
  order       Float?
  title       String
  description String?
  image       File?    @relation(fields: [imageId], references: [id])
  imageId     Int?     @unique
  published   Boolean? @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          Int       @id @default(autoincrement())
  order       Float?
  title       String
  description String?
  audio       File?     @relation("audio", fields: [audioId], references: [id])
  audioId     Int?      @unique
  image       File?     @relation("image", fields: [imageId], references: [id])
  imageId     Int?      @unique
  sections    Section[]
  published   Boolean?  @default(false)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          Int          @id @default(autoincrement())
  order       Float?
  title       String
  description String?
  image       File?        @relation(fields: [imageId], references: [id])
  imageId     Int?         @unique
  type        TypeSection?
  course      Course?      @relation(fields: [courseId], references: [id])
  courseId    Int?
  replies     Reply[]
  published   Boolean?     @default(false)
  author      User?        @relation(fields: [authorId], references: [id])
  authorId    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Reply {
  id           Int         @id @default(autoincrement())
  order        Float?
  file         File?       @relation(fields: [fileId], references: [id])
  fileId       Int?        @unique
  text         String?
  reply        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  section      Section?    @relation(fields: [sectionId], references: [id])
  sectionId    Int?
  user         Actor?      @relation(fields: [actorId], references: [id])
  actorId      Int?
  quickReply   QuickReply? @relation(fields: [quickReplyId], references: [id])
  quickReplyId Int?        @unique
}

model QuickReply {
  id     Int               @id @default(autoincrement())
  reply  Reply?
  keepIt Boolean?          @default(true)
  type   TypeReply?
  values QuickReplyValue[]
}

model QuickReplyValue {

  id           Int         @id @default(autoincrement())
  title        String?
  value        String?
  quickReply   QuickReply? @relation(fields: [quickReplyId], references: [id])
  quickReplyId Int?
}

model Actor {

  id        Int      @id @default(autoincrement())
  name      String?
  avatar    File?    @relation(fields: [fileId], references: [id])
  fileId    Int?     @unique
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {

  id          Int          @id @default(autoincrement())
  name        String?
  link        String?
  location    String?
  key         String?
  bucket      String?
  etag        String?
  reply       Reply?
  actor       Actor?
  affirmation Affirmation?
  courseImage Course?      @relation("image")
  courseAudio Course?      @relation("audio")
  section     Section?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        TypeFile?
}

enum TypeSection {
  CHAT
  ARTICLE
}

enum TypeReply {
  checkbox
  radio
}

enum Role {
  USER
  ADMIN
}

enum TypeFile {
  AUDIO
  IMAGE
  VIDEO
}

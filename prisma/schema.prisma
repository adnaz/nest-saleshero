// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../src/@generated/prisma-nestjs-graphql"
    fields_Validator_from = "class-validator"
    fields_Validator_input = true
}
model App {
  id    Int     @default(autoincrement()) @id
  name  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
   /// @Validator.MinLength(3)
  username  String? @unique
  name  String?
  /// @HideField()
  password String
  posts Post[]
  courses Course[]
  sections Section[]
  role      Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Course {
  id        Int      @default(autoincrement()) @id
  title     String
  description   String?
  audio   String?
  image   String?
  sections Section[]
  published Boolean? @default(false)
  ///@HideField({ input: true, output: false })
  author    User?    @relation(fields: [authorId], references: [id])
  ///@HideField({ input: true, output: false })
  authorId  Int?
  ///@HideField({ input: true, output: false })
  createdAt DateTime @default(now())
  ///@HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt
}
model Section {
  id        Int      @default(autoincrement()) @id
  title     String
  description   String?
  image   String?
  type TypeSection?
  course Course? @relation(fields: [courseId],references:[id])
  courseId Int?
  published Boolean? @default(false)
  ///@HideField({ input: true, output: false })
  author    User?    @relation(fields: [authorId], references: [id])
  ///@HideField({ input: true, output: false })
  authorId  Int?
  ///@HideField({ input: true, output: false })
  createdAt DateTime @default(now())
  ///@HideField({ input: true, output: false })
  updatedAt DateTime @updatedAt
}
model Reply {
  id        Int      @default(autoincrement()) @id
  text String?
  audio   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    Actor?    @relation(fields: [userId], references: [id])
  userId  Int?
}
model QuickReply {
    id        Int      @default(autoincrement()) @id
    type TypeReply
    values QuickReplyValue[]
}
model QuickReplyValue {
      id        Int      @default(autoincrement()) @id
      title String
      value String
      quickReply QuickReply? @relation(fields: [quickReplyId], references: [id])
      quickReplyId Int?
}
model Actor {
  id    Int     @default(autoincrement()) @id
  name  String?
  avatar      String?
  replies Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum TypeSection {
  CHAT
  ARTICLE
}
enum TypeReply {
  checkbox
  radio
}
enum Role {
  USER
  ADMIN
}